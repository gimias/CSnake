<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <title>CSnake Manual</title>

  <bookinfo>
    <date>12/03/2008</date>

    <author>
      <firstname>Maarten</firstname>

      <surname>Nieber</surname>

      <affiliation>
        <orgname>Center for Computational Imaging &amp; Simulation
        Technologies in Biomedicine (CISTIB) – Information &amp;
        Communications Technologies Department, Universitat Pompeu Fabra
        (UPF), Spain, and Networking Biomedical Research Center on
        Bioengineering, Biomaterials and Nanomedicine (CIBER-BBN) c/ Tànger,
        122-140, E08018 Barcelona, Spain</orgname>
      </affiliation>
    </author>
  </bookinfo>

  <chapter>
    <title>What is CSnake</title>

    <para>CSnake is a tool for C++ source code configuration. This means that
    CSnake can be used to create libraries and executables out of C++ source
    code. For this purpose, CSnake allows you to:</para>

    <itemizedlist>
      <listitem>
        <para>define libraries and executables</para>
      </listitem>

      <listitem>
        <para>specify which source files should be incorporated into a library
        or executable</para>
      </listitem>

      <listitem>
        <para>specify paths where the compiler should search for include
        files</para>
      </listitem>

      <listitem>
        <para>define dependencies between different libraries and
        executables</para>
      </listitem>

      <listitem>
        <para>include <emphasis>config-files</emphasis> and
        <emphasis>use-files</emphasis> from CMake. This is possible because
        <emphasis role="bold">CSnake is internally using
        CMake</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>The output of CSnake is a set of CMake files. In most cases, you
    will not be aware of this, because you will use CSnakeGUI to produce a set
    of Visual Studio files (on Windows) or KDevelop files that you can
    directly use to build your applications and libraries.</para>

    <note>
      <para>The name CSnake derives from the Python programming language (as
      CSnake is written in Python) and CMake.</para>
    </note>

    <note>
      <para>As mentioned above, CSnake is built upon CMake. This manual will
      often state that CSnake creates configuration files, even though the
      actual work is performed by CMake. This is to enhance the readability,
      and not to take credit for the good work done by the creators of
      CMake!</para>
    </note>

    <warning>
      <para>CSnake has been tested with CMake version 2.4-patch 6. Please use
      this version. A CSnake version that works with CMake 2.6 is under
      development.</para>
    </warning>
  </chapter>

  <chapter>
    <title>Installing CSnake</title>

    <para></para>

    <section>
      <title>Prerequisites</title>

      <para>Since CSnake is based on CMake, the first thing you need to do is
      to install <ulink
      url="http://www.cmake.org/cmake/resources/software.html">CMake
      2.4</ulink>.</para>
    </section>

    <section>
      <title>Installing the source version of CSnake</title>

      <para>The CSnake source code can be obtained from the SVN repository at
      https://svncistib.upf.edu/repos/csnake. To use the source version, you
      need to have <ulink url="http://www.python.org/download/">Python</ulink>
      and <ulink url="http://www.wxpython.org/download.php">wxPython</ulink>
      installed. Note that on most Linux systems, Python is already
      installed.</para>
    </section>

    <section>
      <title>Installing the binary version of CSnake for Windows</title>

      <para>At the moment, no binary version is available, but for the Windows
      platform there will be one in the future.</para>
    </section>
  </chapter>

  <chapter>
    <title>Example of using CSnakeGUI</title>

    <para>This chapter contains an example session that explains how you can
    quickly start working with CSnake to build your source code. The next
    chapters explain in detail how CSnake works and which advanced features
    are available.</para>

    <section>
      <title>Start CSnakeGUI</title>

      <para>Start CSnakeGUI by double clicking on csnakeGUI.bat (in Windows)
      or csnakeGUI.sh (in Linux).</para>
    </section>

    <section>
      <title>Import source code for the Hello project</title>

      <para>In this step, we will configure the source code for an example
      project called Hello. The Hello project is a C++ library for printing a
      greeting on the console screen. In the <guimenu>Wizard</guimenu> menu,
      choose item <emphasis><emphasis><guimenuitem>Import
      existing</guimenuitem> <guimenuitem>source</guimenuitem>
      <guimenuitem>folder</guimenuitem></emphasis></emphasis>. Select the
      folder <filename>Hello</filename> in the <filename>examples</filename>
      folder of CSnake, and choose 'Dynamic library' as the project type. This
      will create a new so-called CSnake file in the
      <filename>Hello</filename> folder. The CSnake file is a Python script
      for configuring the Hello project. Note that the filename of the current
      CSnake file is displayed in the first field of the CSnakeGUI main
      screen. In the next step, CSnakeGUI will be used to run the CSnake file
      to obtain a solution that can be built in your IDE.</para>
    </section>

    <section>
      <title id="build-the-source-code">Build the source code</title>

      <para>Now, we have to choose the folder in which we want to place the
      build results for the Hello project. For this you should use of Build
      Folder field of the CSnakeGUI main screen. You can type a path in this
      field directly, or press the ellipsis button
      (<guibutton>...</guibutton>) to open the folder browser. When the build
      folder has been set, press the <guibutton>Create solution</guibutton>
      button and answer 'Yes' to the suggestions made by CSnakeGUI (these will
      be explained later). CSnake will now execute the CSnake file and place a
      solution for your IDE in the Build Folder. Finally, press the
      <guibutton>Open solution in IDE</guibutton> button and build the library
      in your IDE.</para>
    </section>

    <section>
      <title>Import source code for the GreetMe project</title>

      <para>In this step, we will build the GreetMe project: an executable
      that uses the Hello library to greet the user. Use the
      <guimenuitem>Wizard</guimenuitem> menu to import the source code for the
      GreetMe project (also located in the CSnake
      <filename>examples</filename> folder). This time, choose 'Executable' as
      the project type. When the project has been imported, click on the
      <guibutton>Edit</guibutton> button (located next to the CSnake File
      input field at the top of the CSnakeGUI screen).</para>

      <para>We will now insert a few lines that tell CSnake that the GreetMe
      project needs to use the Hello project. Edit to the top of the file to
      make it look like this:<programlisting># this line imports the python modules needed for CSnake
import csnProject

# this section imports other CSnake python modules
from Hello import hello
</programlisting></para>

      <para>Then locate the call to the AddProjects function and change it as
      follows:</para>

      <programlisting># The AddProjects command adds a list of dependency projects.
greetMe.AddProjects([hello])
</programlisting>

      <para>Finally, build the GreetMe project in the same way as the Hello
      project (see <xref linkend="build-the-source-code" />).</para>
    </section>

    <section>
      <title>Depend upon an existing CMake project</title>

      <para>If you want, you can use the AddCmakeProjects function to add a
      dependency on an existing CMake project:</para>

      <programlisting>greetMe.AddCMakeProjects(["VTK", "ITK"])</programlisting>

      <para>This will result in calls to FIND_PACKAGE(VTK) and
      FIND_PACKAGE(ITK) in the CMakeLists.txt that CSnake generates for the
      GreetMe project.</para>
    </section>
  </chapter>

  <chapter>
    <title>A closer look at the CSnake file</title>

    <para>In this chapter, we will study the csnGreetMe.py file that was
    created in chapter 3. The first lines are:<programlisting
    linenumbering="numbered"># this line imports the python modules needed for CSnake
import csnProject

# this section imports other CSnake python modules
from Hello.csnHello import hello
</programlisting>Line two imports the csnProject module which is needed for
    CSnake. Line 5 imports the Hello project; more specifically, it allows us
    to access the Hello project using the object instance 'hello'.</para>

    <para>The next lines are:</para>

    <programlisting># this section creates a Project instance for storing all GreetMe ingredients.
greetMe = csnProject.Executable("GreetMe")
</programlisting>

    <para>These lines create a new Executable project and assign it to the
    variable greetMe. In other words: greetMe is a variable containing an
    instance of the GreetMe project. All information about the GreetMe project
    can be accessed through the instance 'greetMe'.</para>

    <para>The next lines are:<programlisting># The AddTests command adds a list of source tests (wildcards are allowed).
if locals().get("cxxTest"):
    greetMe.AddTests([u'tests/*.cpp', u'tests/*.h'], cxxTest)</programlisting></para>

    <para>The import wizard recognises when source files are placed in a
    folder called tests, and automatically sets up a test project to compile
    these source files. <ulink
    url="http://cxxtest.tigris.org/">CxxTest</ulink> is an excellent open
    source C++ testing framework that is developed by a third party (just like
    CMake). The test project will have the name GreetMeTests and is
    automatically included in the solution. It is highly recommended to build
    GreetMeTests and experiment with it. Note the if-statement, that implies
    that the test are only configured if the cxxTest project is defined (you
    can enable the tests by following the instructions in <xref
    linkend="directory-modules" /> to make the cxxTest symbol available in the
    csnake file). </para>

    <para>The next lines are:</para>

    <para><programlisting># The AddSources command adds a list of source files (wildcards are allowed).
hello.AddSources(['src/*.cpp'])

# The AddIncludeFolders command adds a list of folders (wildcards are allowed) where include files are found.
hello.AddIncludeFolders(['src'])
</programlisting>The call to AddSources adds all sources that match the
    pattern 'src/*.cpp' to the GreetMe project. By default, CSnake will try to
    match the pattern (i.e. src/*.cpp) by searching in the folder that
    contains the CSnake file.<note>
        <para>The folder that contains the CSnake file is referred to as the
        <emphasis>project root folder</emphasis>.</para>
      </note></para>

    <para>The call to AddIncludeFolders tells CSnake that the 'src' folder
    should be used to find include files for the Hello project. Since 'src' is
    a relative path, CSnake will look for this folder in the project root
    folder.</para>

    <para>The next lines are:</para>

    <programlisting># The AddProjects command adds a list of dependency projects.
greetMe.AddProjects([hello])
</programlisting>

    <para>The call to AddProjects adds the Hello project as a dependency
    project of GreetMe. Note that the Hello project itself may depend on other
    projects. When the solution for the GreetMe project is created, CSnake
    will find out all needed dependency projects and place them in the
    solution.</para>
  </chapter>

  <chapter>
    <title>Context, root folders and other CSnake concepts</title>

    <para>This chapter will explain some CSnake concepts.</para>

    <section>
      <title>The CSnake context</title>

      <para>The most important concept is the CSnake context. To explain what
      is meant by the CSnake context, let's first consider again the CSnake
      file csnGreetMe.py, which was created in chapter 3. This files describes
      an executable project: the source files it contains, the include
      folders, the other projects it depends upon, etcera. However, this
      information is not sufficient for creating a solution. CSnakeGUI also
      needs to know:<itemizedlist>
          <listitem>
            <para>the build folder, which is the location for placing build
            artefacts</para>
          </listitem>

          <listitem>
            <para>which <emphasis>root folders</emphasis> to use for locating
            the CSnake files of dependency projects</para>
          </listitem>

          <listitem>
            <para>the compiler you will be using</para>
          </listitem>

          <listitem>
            <para>whether you want to build in Debug or Release mode</para>
          </listitem>

          <listitem>
            <para>the version of CMake that should be used to create the
            solution</para>
          </listitem>
        </itemizedlist>All this information is stored in the CSnake context,
      together with the location of the CSnake file and the name of the
      variable that contains the target project (in our example, this variable
      is named 'greetMe'). Note that the location where CSnake stores the
      context is displayed in the application's title bar.</para>
    </section>

    <section>
      <title>Root folders</title>

      <para>Root folders are added to the Python module search path, and are
      used to locate other CSnake projects. In the csnGreetMe example, we
      imported the Hello project using the line</para>

      <para><programlisting># this section imports other CSnake python modules
from Hello.csnHello import hello
</programlisting>The Hello folder was found because it is a sub-folder of a
      root folder: the CSnake <filename>examples</filename> folder. You can
      add root folders using the Add button in CSnakeGUI, or using the Detect
      button. The first time you configure a project, CSnakeGUI will perform
      the Detect operation automatically.<note>
          <para>When the Detect button is pressed, CSnakeGUI will search for a
          file called rootFolders.csnake (in our case, there is such a file in
          the <filename>examples</filename> folder) which holds information
          about root folders.</para>
        </note></para>
    </section>

    <section>
      <title>The Build Folder</title>

      <para>In the section <xref linkend="build-the-source-code" /> we saw how
      to create build results in the Build Folder. The Build Folder has the
      following subfolders:</para>

      <itemizedlist>
        <listitem>
          <para>bin: this folder contains the final build results, such as
          executables and dlls. The bin folder has subfolders Debug (for debug
          executables and dlls), Release (for release executables and dlls)
          and TestOutput (for results generated by test executables).</para>
        </listitem>

        <listitem>
          <para>library: this folder contains intermediate build files for
          creating dlls and libraries, such as CMake files, compiler outputs
          and precompiled header files.</para>
        </listitem>

        <listitem>
          <para>executable: this folder is similar to library, but contains
          intermediate results for building executables.</para>

          <note>
            <para>The bin sub-folder of the Build Folder is also called the
            Build Results Folder. One of the goals of CSnake is to allow you
            to run your applications directly from the Build Results Folder,
            without the need for copying files from the Build Results Folder
            to an installation folder.</para>
          </note>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title id="directory-modules">Directory modules</title>

      <para>If you are using a set of related projects, with a CSnake file for
      each of them, it can be convenient to create a so-called
      <emphasis>directory module</emphasis>. The examples folder of CSnakeGUI
      already contains such a directory module called csnExamples.py. To use
      it, change the section for importing other CSnake modules to:</para>

      <programlisting># this section imports other CSnake python modules
from csnExamples import *</programlisting>

      <para>The rest of the CSnake file can remain the same. Now let's
      consider what happens when the following lines are executed:</para>

      <programlisting># The AddProjects command adds a list of dependency projects.
greetMe.AddProjects([hello])
</programlisting>

      <para>In this case, the hello symbol is found in the csnExamples
      directory module. In fact, csnExample.hello is a <emphasis>project
      function</emphasis>: a function returning a CSnake project instance. In
      most cases, projects and project functions are treated in the same way
      by CSnake.</para>
    </section>
  </chapter>

  <chapter>
    <title>Installing extra files into the Build Results Folder</title>

    <para>In many cases, your application will need extra files to run. Here
    is how to tell CSnake that the GreetMe project needs to have the file
    GreetMe.license in the same folder as the GreetMe executable.</para>

    <programlisting>greetMe.AddFilesToInstall(["resources/greetMe.license"])</programlisting>

    <para>If you now press the button Install Files to Build Folder, CSnake
    will copy the greetMe.license file to the bin/Release and bin/Debug
    sub-folder of the Build Results Folder.</para>

    <para>It is also possible to automatically install new files in the Build
    Results Folder after each time that you press the <guibutton>Create
    solution</guibutton> button. To enable this option, mark the corresponding
    check box in the CSnake section of the Options tab of CSnakeGUI.</para>
  </chapter>

  <chapter>
    <title>Generating a CSnake project using CSnakeConsole</title>

    <para>It is possible to configure your project using CSnakeConsole instead
    of CSnakeGUI. CSnakeConsole needs a context file and a CSnakeGUI options
    file; at the moment, these files must first be created using CSnakeGUI.
    Then, CSnake can be run on the command line as follows:</para>

    <programlisting>&gt;python csnConsole.py mycontext.csnakecontext options --thirdParty
&gt;python csnConsole.py mycontext.csnakecontext options --install
&gt;python csnConsole.py mycontext.csnakecontext options</programlisting>

    <para>The first line is used to run the step 'Create third party
    solution', the second one to run the step 'Install files to Build Folder'
    and the last one for 'Create Solution' (these steps correspond to the
    buttons at the bottom of the CSnakeGUI screen).</para>
  </chapter>
</book>